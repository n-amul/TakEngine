# ------------------------------------------------------------
#   TakEngine ‑ Engine library
# ------------------------------------------------------------

# All engine source (.cpp) files; headers are included implicitly.
file(GLOB_RECURSE ENGINE_SRC CONFIGURE_DEPENDS src/*.cpp)

add_library(engine SHARED ${ENGINE_SRC})
target_compile_features(engine PUBLIC cxx_std_17)

# Export headers for consumers (build tree + install tree)
target_include_directories(engine
    PUBLIC
        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src>
        $<INSTALL_INTERFACE:include>
)

target_compile_definitions(engine PRIVATE ENGINE_BUILD_DLL)

# ------------------------------------------------------------
#   Third‑party dependencies
# ------------------------------------------------------------

find_package(Vulkan REQUIRED)      # system Vulkan SDK

include(FetchContent)

# ---- GLM (header‑only, always static) ----
FetchContent_Declare(
    glm
    GIT_REPOSITORY https://github.com/g-truc/glm.git
    GIT_TAG        0.9.9.8
)
FetchContent_MakeAvailable(glm)

# ---- GLFW (force static build so no glfw3.dll is produced) ----
set(BUILD_SHARED_LIBS OFF CACHE BOOL "" FORCE)       # static only while fetching glfw
FetchContent_Declare(
    glfw
    GIT_REPOSITORY https://github.com/glfw/glfw.git
    GIT_TAG        3.4
)
FetchContent_MakeAvailable(glfw)
set(BUILD_SHARED_LIBS OFF)                           # leave default OFF for later libs too

# ---- Link everything into engine.dll ----
target_link_libraries(engine
    PUBLIC
        Vulkan::Vulkan   # include & link flags
        glm::glm         # header‑only
        glfw             # static .lib
)

# Export every symbol on Windows (avoids __declspec(dllexport) everywhere)
set_target_properties(engine PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS ON)
