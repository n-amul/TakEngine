# ------------------------------------------------------------
#   TakEngine ‑ Engine library
# ------------------------------------------------------------

file(GLOB_RECURSE ENGINE_SRC CONFIGURE_DEPENDS 
src/*.cpp
src/*.hpp
)

add_library(engine SHARED ${ENGINE_SRC})
target_compile_features(engine PUBLIC cxx_std_17)

# Export headers for consumers (build tree + install tree)
target_include_directories(engine
    PUBLIC
        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src>
        $<INSTALL_INTERFACE:include>
)

target_compile_definitions(engine PRIVATE TEXPORT)
if(MSVC)
    target_compile_options(engine PRIVATE /wd4996)  
    target_compile_options(engine PRIVATE "/MP")
endif()

# ------------------------------------------------------------
#   Third‑party dependencies
# ------------------------------------------------------------

find_package(Vulkan REQUIRED)      # system Vulkan SDK

include(FetchContent)

# ---- GLM ----
FetchContent_Declare(
    glm
    GIT_REPOSITORY https://github.com/g-truc/glm.git
    GIT_TAG        0.9.9.8
)
FetchContent_MakeAvailable(glm)

# ---- GLFW (static) ----
set(BUILD_SHARED_LIBS OFF CACHE BOOL "" FORCE)
set(GLFW_BUILD_EXAMPLES OFF CACHE BOOL "" FORCE)
set(GLFW_BUILD_TESTS OFF CACHE BOOL "" FORCE)
set(GLFW_BUILD_DOCS OFF CACHE BOOL "" FORCE)
FetchContent_Declare(
    glfw
    GIT_REPOSITORY https://github.com/glfw/glfw.git
    GIT_TAG        3.4
)
FetchContent_MakeAvailable(glfw)

# ---- spdlog (header-only by default) ----
FetchContent_Declare(
    spdlog
    GIT_REPOSITORY https://github.com/gabime/spdlog.git
    GIT_TAG        v1.12.0
)
FetchContent_MakeAvailable(spdlog)

# ---- tinygltf ----
FetchContent_Declare(
    tinygltf
    GIT_REPOSITORY https://github.com/syoyo/tinygltf.git
    GIT_TAG        v2.8.21   # pick a stable release
)
FetchContent_MakeAvailable(tinygltf)

# ---- simdjson ----
FetchContent_Declare(
    simdjson
    GIT_REPOSITORY https://github.com/simdjson/simdjson.git
    GIT_TAG        v3.10.1  
)
FetchContent_MakeAvailable(simdjson)

# ---- ZSTD (required for KTX2 support) ----
FetchContent_Declare(
    zstd
    GIT_REPOSITORY https://github.com/facebook/zstd.git
    GIT_TAG        v1.5.5
    SOURCE_SUBDIR  build/cmake
)
set(ZSTD_BUILD_PROGRAMS OFF CACHE BOOL "" FORCE)
set(ZSTD_BUILD_SHARED OFF CACHE BOOL "" FORCE)
set(ZSTD_BUILD_STATIC ON CACHE BOOL "" FORCE)
set(ZSTD_BUILD_TESTS OFF CACHE BOOL "" FORCE)
FetchContent_MakeAvailable(zstd)

# ---- ImGui ----
FetchContent_Declare(
    imgui
    GIT_REPOSITORY https://github.com/ocornut/imgui.git
    GIT_TAG        v1.91.5  # or use 'docking' branch for docking features
)
FetchContent_MakeAvailable(imgui)

# Create ImGui library with core + backends
add_library(imgui STATIC
    ${imgui_SOURCE_DIR}/imgui.cpp
    ${imgui_SOURCE_DIR}/imgui_demo.cpp
    ${imgui_SOURCE_DIR}/imgui_draw.cpp
    ${imgui_SOURCE_DIR}/imgui_tables.cpp
    ${imgui_SOURCE_DIR}/imgui_widgets.cpp
    ${imgui_SOURCE_DIR}/backends/imgui_impl_glfw.cpp
    ${imgui_SOURCE_DIR}/backends/imgui_impl_vulkan.cpp
)

target_include_directories(imgui PUBLIC
    ${imgui_SOURCE_DIR}
    ${imgui_SOURCE_DIR}/backends
)

# ImGui needs GLFW and Vulkan
target_link_libraries(imgui PUBLIC
    glfw
    Vulkan::Vulkan
)

# ---- libktx (KTX texture loader) ----
FetchContent_Declare(
    libktx
    GIT_REPOSITORY https://github.com/KhronosGroup/KTX-Software.git
    GIT_TAG        v4.3.2 
)
# Disable tools and tests to make it lightweight
set(KTX_FEATURE_TOOLS OFF CACHE BOOL "" FORCE)
set(KTX_FEATURE_TESTS OFF CACHE BOOL "" FORCE)
set(KTX_FEATURE_DOC OFF CACHE BOOL "" FORCE)
set(KTX_FEATURE_STATIC_LIBRARY ON CACHE BOOL "" FORCE)
set(KTX_FEATURE_LOADTEST OFF CACHE BOOL "" FORCE)
set(KTX_FEATURE_KTX1 ON CACHE BOOL "" FORCE)      # Enable KTX1 support
set(KTX_FEATURE_KTX2 ON CACHE BOOL "" FORCE)      # Enable KTX2 support
set(KTX_FEATURE_ZSTD ON CACHE BOOL "" FORCE)      # Enable ZSTD compression
set(KTX_FEATURE_BASIS_UNIVERSAL ON CACHE BOOL "" FORCE)  # Enable basis universal

FetchContent_MakeAvailable(libktx)

# -------------defines--------------
target_compile_definitions(engine PRIVATE
    SHADER_DIR="${CMAKE_SOURCE_DIR}/shaders"
    TEXTURE_DIR="${CMAKE_SOURCE_DIR}/resources/textures"
    MODEL_DIR="${CMAKE_SOURCE_DIR}/resources/models"
)

# ---- Link everything into engine.dll ----
target_link_libraries(engine
    PUBLIC
        Vulkan::Vulkan   # include & link flags
        glm::glm         # header‑only
        glfw             # static .lib
        spdlog::spdlog   # header‑only
        tinygltf            
        simdjson::simdjson
        imgui 
        ktx              # KTX includes basis_universal internally
)